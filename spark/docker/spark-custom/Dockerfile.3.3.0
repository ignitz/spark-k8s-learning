#
# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# ARG SPARK_IMAGE=gcr.io/spark-operator/spark-py:v3.1.1-hadoop3
ARG SPARK_IMAGE=spark-base:latest
FROM ${SPARK_IMAGE}
USER root

RUN apt update && apt install -y git

RUN cd /tmp && git clone https://github.com/edenhill/librdkafka.git && \
    cd librdkafka && git checkout tags/v1.9.0 && \
    ./configure && make && make install && \
    cd ../ && rm -rf librdkafka


# Build main Spark Image
FROM ${SPARK_IMAGE}

# Switch to user root so we can add additional jars and configuration files.
USER root

# Setup dependencies for Google Cloud Storage access.
RUN rm $SPARK_HOME/jars/guava-*.jar
# Exception in thread "main" java.lang.NoSuchMethodError: 'void com.google.common.base.Preconditions.checkArgument(boolean, java.lang.String, java.lang.Object, java.lang.Object)'
# Consider update to guava-31.1-jre.jar
# ADD https://repo1.maven.org/maven2/com/google/guava/guava/23.0/guava-23.0.jar $SPARK_HOME/jars
# RUN chmod 644 $SPARK_HOME/jars/guava-23.0.jar
# Add the connector jar needed to access Google Cloud Storage using the Hadoop FileSystem API.
# ADD https://storage.googleapis.com/hadoop-lib/gcs/gcs-connector-latest-hadoop2.jar $SPARK_HOME/jars
# RUN chmod 644 $SPARK_HOME/jars/gcs-connector-latest-hadoop2.jar
# ADD https://storage.googleapis.com/spark-lib/bigquery/spark-bigquery-latest_2.12.jar $SPARK_HOME/jars
# RUN chmod 644 $SPARK_HOME/jars/spark-bigquery-latest_2.12.jar

ARG SPARK_VERSION="3.3.1"
ARG HADOOP_VERSION="3.3.3"

# Install maven packages
COPY nop.py /root/nop.py
# Use org.apache.hadoop:hadoop-cloud:${HADOOP_VERSION} with others cloud providers
RUN spark-submit --packages \
    org.apache.hadoop:hadoop-aws:${HADOOP_VERSION},org.apache.spark:spark-sql-kafka-0-10_2.12:${SPARK_VERSION},io.delta:delta-core_2.12:2.1.0,com.google.guava:guava:31.1-jre \
    /root/nop.py && \
    mv /root/.ivy2/jars/* $SPARK_HOME/jars/ && \
    rm -rf /root/.ivy2
RUN chmod 644 $SPARK_HOME/jars/*

# Avro library
ADD https://repo1.maven.org/maven2/org/apache/spark/spark-avro_2.12/${SPARK_VERSION}/spark-avro_2.12-${SPARK_VERSION}.jar $SPARK_HOME/jars

# Install delta libraries
RUN pip install --upgrade pip
RUN pip install delta-spark --no-dependencies

# Setup for the Prometheus JMX exporter.
# Add the Prometheus JMX exporter Java agent jar for exposing metrics sent to the JmxSink to Prometheus.
ADD https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/0.11.0/jmx_prometheus_javaagent-0.11.0.jar /prometheus/
RUN chmod 644 /prometheus/jmx_prometheus_javaagent-0.11.0.jar

USER ${spark_uid}

RUN mkdir -p /etc/metrics/conf
COPY conf/metrics.properties /etc/metrics/conf
COPY conf/prometheus.yaml /etc/metrics/conf

ENV HADOOP_HOME /opt/hadoop
ENV HADOOP_CONF_DIR $HADOOP_HOME/conf
RUN mkdir -p $HADOOP_HOME/conf
COPY conf/core-site.xml $HADOOP_HOME/conf/
COPY conf/spark-env.sh $HADOOP_HOME/conf/
COPY conf/spark-defaults.conf $HADOOP_HOME/conf/

ENV PATH $PATH:/opt/spark/bin

# Copy LIBRDKAFKA_LIBRARY_PATH to this image
# This shit is needed for librdkafka to work on Apple Silicon (M1)
COPY --from=0 /usr/local/lib /usr/local/lib
COPY --from=0 /usr/local/include /usr/local/include
COPY --from=0 /usr/local/share/doc/librdkafka /usr/local/share/doc/librdkafka

# PIP requirements
COPY ./requirements.txt /tmp/
RUN pip install -r /tmp/requirements.txt && rm /tmp/requirements.txt

# Support Jupyter Notebook
# RUN pip install jupyter
# ENV PYSPARK_DRIVER_PYTHON "jupyter"
# ENV PYSPARK_DRIVER_PYTHON_OPTS "notebook --properties-file /opt/spark/conf/spark.properties"
# ENV PYSPARK_PYTHON python3

# COPY ./entrypoint.sh /opt/entrypoint.sh
