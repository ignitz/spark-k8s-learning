---
version: '2'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.0
    hostname: zookeeper
    container_name: zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-server:7.2.0
    hostname: broker
    container_name: broker
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081

  schema-registry:
    image: confluentinc/cp-schema-registry:7.2.0
    hostname: schema-registry
    container_name: schema-registry
    restart: unless-stopped
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  connect:
    build: ./connect
    hostname: connect
    container_name: connect
    restart: unless-stopped
    depends_on:
      - broker
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      # CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_ZOOKEEPER_CONNECT: "zookeeper:2181"
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-5.4.1.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
      CONNECT_TOMBSTONES_ON_DELETE: false

  # To monitor Kafka
  kowl:
    image: quay.io/cloudhut/kowl:master
    hostname: kowl
    container_name: kowl
    depends_on:
      - broker
      - schema-registry
      - connect
    restart: unless-stopped
    ports:
      - "7777:7777"
    volumes:
      - ./kowl/config.yaml:/config.yaml
    environment:
      - CONFIG_FILEPATH=/config.yaml

  # To use as backend of Airflow and datasource to Kafka-Connect
  postgres:
    image: quay.io/debezium/example-postgres:1.9
    hostname: postgres
    container_name: postgres
    restart: unless-stopped
    # Uncomment to use data folder to persist data
    # volumes:
    #   - ./data/postgres:/var/lib/postgresql/data
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
     - 5432:5432
    environment:
     - POSTGRES_USER=postgres
     - POSTGRES_PASSWORD=postgres
     
  minio:
    image: quay.io/minio/minio:latest
    hostname: minio
    container_name: minio
    restart: unless-stopped
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: miniominio
    ## uncomment to persist data in minio 
    # volumes:
    #   - ./data/minio:/data
    volumes:
      - minio:/data
    command: server /data --console-address ":9001"

  ####################################################################
  # Trino
  ####################################################################
  # trino-coordinator:
  #   image: "trinodb/trino:latest"
  #   ports:
  #     - '8080:8080'
  #   volumes:
  #     - ./trino/catalog:/etc/trino/catalog:ro
  #     - ./trino/coordinator/etc/config.properties:/etc/trino/config.properties:ro
  #     - ./trino/coordinator/etc/jvm.config:/etc/trino/jvm.config:ro
  #     - ./trino/coordinator/etc/node.properties:/etc/trino/node.properties:ro
  #   depends_on:
  #     - hive
  #     - trino-worker
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: "2"
  #         memory: 3G

  # trino-worker:
  #   image: "trinodb/trino:latest"
  #   volumes:
  #     - ./trino/catalog:/etc/trino/catalog:ro
  #     - ./trino/worker/etc/config.properties:/etc/trino/config.properties:ro
  #     - ./trino/worker/etc/jvm.config:/etc/trino/jvm.config:ro
  #     - ./trino/worker/etc/node.properties:/etc/trino/node.properties:ro
  #   depends_on:
  #     - hive
  #   deploy:
  #     mode: replicated
  #     replicas: 1
  #     resources:
  #       limits:
  #         cpus: "4"
  #         memory: 6G

  # superset:
  #   build: ./superset
  #   container_name: superset
  #   hostname: superset
  #   ports:
  #     - "8088:8088"
  #   volumes:
  #     - superset-data:/app/superset_home
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: "1"
  #         memory: 1G
  ###################################################################
  # Hive
  ###################################################################
  # mariadb:
  #   image: 'mariadb:latest'
  #   hostname: mariadb
  #   ports:
  #     - '3306:3306'
  #   environment:
  #     MYSQL_ROOT_PASSWORD: admin
  #     MYSQL_USER: admin
  #     MYSQL_PASSWORD: admin
  #     MYSQL_DATABASE: metastore_db
  # hive:
  #   build: ./hive
  #   container_name: hive
  #   hostname: hive
  #   ports:
  #     - '9083:9083' # Metastore Thrift
  #     - '10000:10000'
  #     - '10002:10002'
  #   volumes:
  #     - ./hive/conf/metastore-site_psql.xml:/opt/apache-hive-metastore-3.0.0-bin/conf/metastore-site.xml:ro
  #   environment:
  #     METASTORE_DB_HOSTNAME: postgres
  #   depends_on:
  #     - postgres
  #     - minio
      
networks:
  default:
    name: kind

volumes:
  superset-data:
    driver: local
  minio:
    driver: local
  postgres-data:
    driver: local
